SQL> REM (1)  For the given order number, if there are no rows then display as “No order with the  given order <number>”.
SQL> Rem If the order contains more than one item, display as “The  given order <number> contains more than one item”. 
SQL> Rem If the order contains single  item, display as “The given order <number> contains exactly one item”. Use  predefined exception handling.

SQL> declare
  2      orderid order_list.order_no%type;
  3      pid pizza.pizza_id%type;
  4  
  5  begin
  6      orderid:='&orderid';
  7      select pizza_id into pid from order_list where order_no=orderid;
  8      If   SQL%ROWCOUNT=1 Then
  9          dbms_output.put_line(' The given order '||orderid||' contains exactly one item');
 10      END IF;
 11  
 12  Exception
 13      When NO_DATA_FOUND THEN
 14         dbms_output.put_line('No order with the  given order '||orderid);
 15      When TOO_MANY_ROWS Then
 16         dbms_output.put_line('The  given order '||orderid ||' contains more than one item”');
 17  End;
 18  /
Enter value for orderid: OP114
old   6:     orderid:='&orderid';
new   6:     orderid:='OP114';
No order with the  given order OP114                                                                                                                            

PL/SQL procedure successfully completed.

SQL> /
Enter value for orderid: OP100
old   6:     orderid:='&orderid';
new   6:     orderid:='OP100';
The  given order OP100 contains more than one item”                                                                                                             

PL/SQL procedure successfully completed.

SQL> /
Enter value for orderid: OP105
old   6:     orderid:='&orderid';
new   6:     orderid:='OP105';
The given order OP105 contains exactly one item                                                                                                                 

PL/SQL procedure successfully completed.

 
SQL> REM (2) While inserting order details, raise an exception when the delivery date is less than  the order date.
 
SQL> CREATE OR REPLACE TRIGGER datecheck
  2  BEFORE INSERT
  3  ON orders
  4  FOR EACH ROW
  5  
  6  DECLARE
  7   wrong_date EXCEPTION;
  8  
  9  BEGIN
 10   IF(:new.del_date < :new.order_date) THEN
 11    RAISE wrong_date;
 12   END IF;
 13  
 14  EXCEPTION
 15  WHEN wrong_date THEN
 16   raise_application_error(-20010, 'Delivery date should not be less than the order date');
 17  end;
 18  /

Trigger created.

SQL> savepoint s1;

Savepoint created.

SQL> insert into orders(order_no, cust_id, order_date ,del_date) values('OP117','c001','01-aug-2015','02-aug-2015');

1 row created.

SQL> insert into orders(order_no, cust_id, order_date ,del_date) values('OP119','c001','02-aug-2015','01-JUL-2015');
insert into orders(order_no, cust_id, order_date ,del_date) values('OP119','c001','02-aug-2015','01-JUL-2015')
            *
ERROR at line 1:
ORA-20010: Delivery date should not be less than the order date 
ORA-06512: at "4100.DATECHECK", line 11 
ORA-04088: error during execution of trigger '4100.DATECHECK' 


SQL> rollback to s1;

Rollback complete.

SQL> m While populating,  raise an exception when the quantity is zero.
SP2-0734: unknown command beginning "m While po..." - rest of line ignored.
 
SQL> create or replace procedure orderlist_insert(orderid IN varchar2,pid IN varchar2,quantity IN number) IS
  2  quanzero exception;
  3  
  4  Begin
  5      IF quantity =0 Then
  6          RAISE quanzero;
  7      ELSE
  8          insert into order_list values (orderid,pid,quantity);
  9      END IF;
 10  
 11  Exception
 12      When quanzero Then
 13          dbms_output.put_line('The quantity cannot be zero');
 14  end;
 15  /

Procedure created.

SQL> savepoint s1;

Savepoint created.

SQL> CALL orderlist_insert('OP105','p002',5);

Call completed.

SQL> select * from order_list where order_no='OP105';

ORDER_ PIZZA        QTY                                                                                                                                         
------ ----- ----------                                                                                                                                         
OP105  p001           3                                                                                                                                         
OP105  p002           5                                                                                                                                         

SQL> CALL orderlist_insert('OP105','p003',0);
The quantity cannot be zero                                                                                                                                     

Call completed.

SQL> rollback to s1;

Rollback complete.

SQL> spool off;
